Pipelines are a simple way to keep data preprocessing and modeling code organized

Pipeline bundles preprocessing and modeling steps so you can use the whole bundle as if it were a single step.

Benefits:
    1. Cleaner Code: Accounting for data at each step of preprocessing can get messy. 
        With a pipeline, you don't need to manually keep track of your training and validation data at each step.
    2. Fewer Bugs: Fewer opportunities to misapply a step or forget a preprocessing step.
    3. Easier to Productionize: Hard to transition a model from a prototype to something deployble.
    4. More Options for Model Validation


Full Pipeline 
Step 1: Define Preprocessing Steps
    ColumnTransformer class bundles together different preprocessing steps.
    Following code:
        imputes missing values in numerical data
                            and in categorical data

from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder

# Preprocessing for numerical data
numerical_transformer = SimpleImputer(strategy='constant')

# Preprocessing for categorical data
categorical_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='most_frequent')),
    ('onehot', OneHotEncoder(handle_unknown='ignore'))
])

# Bundle preprocessing for numerical and categorical data
preprocessor = ColumnTransformer(
    transformers=[
        ('num', numerical_transformer, numerical_cols),
        ('cat', categorical_transformer, categorical_cols)
    ])

Step 2: Define the Model
from sklearn.ensemble import RandomForestRegressor

model = RandomForestRegressor(n_estimators=100, random_state=0)

Step 3: Create and evaluate the Pipeline
from sklearn.metrics import mean_absolute_error

# Bundle preprocessing and modeling code in a pipeline
my_pipeline = Pipeline(steps=[('preprocessor', preprocessor),
                              ('model', model)
                             ])

# Preprocessing of training data, fit model 
my_pipeline.fit(X_train, y_train)

# Preprocessing of validation data, get predictions
preds = my_pipeline.predict(X_valid)

# Evaluate the model
score = mean_absolute_error(y_valid, preds)
print('MAE:', score)