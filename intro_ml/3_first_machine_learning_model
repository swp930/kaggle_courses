Selecting Data for Modeling 

Dataset had too many variables to wrap your head around or print
How can you pare down data to something you can understand?

Will use intuition to choose variables for now.

Have to examine columns of pd Dataframe

import pandas as pd

melbourne_file_path = '../input/melbourne-housing-snapshot/melb_data.csv'
melbourne_data = pd.read_csv(melbourne_file_path) 
melbourne_data.columns

# dropna drops missing values (think of na as "not available")
melbourne_data = melbourne_data.dropna(axis=0)

Can pull out a variable with dot-notation.
Single column is stored in a Series, which is basically a DataFrame with one column.

prediction target:
    Column we want to predict

y = melbourne_data.Price

The columns that are inputted into our model are called features. 
melbourne_features = ['Rooms', 'Bathroom', 'Landsize', 'Lattitude', 'Longtitude']
X = melbourne_data[melbourne_features]

X.describe()

# Shows top few rows
X.head()

Steps to building and using a model are:
- Define: What type of model will it be? A decision tree?
    Some other parameters of the model type are specified too. 
- Fit: Capture patterns from provided data. 
    This is the heart of modeling.
- Predict: predict
- Evaluate: Determine how accurate the model's predictions are.

from sklearn.tree import DecisionTreeRegressor

# Define model. Specify a number for random_state to ensure same results each run
melbourne_model = DecisionTreeRegressor(random_state=1)

# Fit model
melbourne_model.fit(X, y)

Many machine learning models allow some randomness in model training.
Specifying a number for random_state ensures you get the saame results in each run.
This is considered good practice. 
You use any number and model quality won't depend meaningfully on what value you choose.

print("Making predictions for the following 5 houses:")
print(X.head())
print("The predictions are")
print(melbourne_model.predict(X.head()))

